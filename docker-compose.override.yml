services:

  # Local services are available on their ports, but also available on:
  # http://api.localhost.tiangolo.com: backend
  # http://dashboard.localhost.tiangolo.com: frontend
  # etc. To enable it, update .env, set:
  # DOMAIN=localhost.tiangolo.com
  proxy:
    image: traefik:3.5
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "${PROXY_HTTP_PORT}:80"
      - "${PROXY_DASHBOARD_PORT}:${PROXY_DASHBOARD_TARGET_PORT}"
    # Duplicate the command from docker-compose.yml to add --api.insecure=true
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.http.address=:80
      # Create an entrypoint "https" listening on port 443
      - --entrypoints.https.address=:443
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable debug logging for local development
      - --log.level=DEBUG
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      - traefik.constraint-label=traefik-public
      # Dummy https-redirect middleware that doesn't really redirect, only to
      # allow running it locally
      - traefik.http.middlewares.https-redirect.contenttype.autodetect=false
    networks:
      - traefik-public
      - default

  db:
    restart: "no"
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"

  adminer:
    restart: "no"
    ports:
      - "${ADMINER_PORT}:${ADMINER_CONTAINER_PORT}"

  backend:
    restart: "no"
    ports:
      - "${PORT_BACKEND}:${BACKEND_CONTAINER_PORT}"
    build:
      context: ./backend
    # command: sleep infinity  # Infinite loop to keep container alive doing nothing
    command:
      - fastapi
      - run
      - --reload
      - "app/main.py"
      - --port
      - "${BACKEND_CONTAINER_PORT}"
    develop:
      watch:
        - path: ./backend
          action: sync
          target: /app
          ignore:
            - ./backend/.venv
            - .venv
        - path: ./backend/pyproject.toml
          action: rebuild
    # TODO: remove once coverage is done locally
    volumes:
      - ./backend/htmlcov:/app/htmlcov
    environment:
      SMTP_HOST: "${MAILCATCHER_SMTP_HOST}"
      SMTP_PORT: "${MAILCATCHER_SMTP_PORT}"
      SMTP_TLS: "false"
      EMAILS_FROM_EMAIL: "noreply@example.com"
      FRONTEND_HOST: "${FRONTEND_HOST}"
      PORT_FRONTEND: "${PORT_FRONTEND}"
      PORT_BACKEND: "${PORT_BACKEND}"
      BACKEND_CORS_ORIGINS: "${BACKEND_CORS_ORIGINS}"

  prestart:
    environment:
      FRONTEND_HOST: "${FRONTEND_HOST}"
      PORT_FRONTEND: "${PORT_FRONTEND}"
      PORT_BACKEND: "${PORT_BACKEND}"
      BACKEND_CORS_ORIGINS: "${BACKEND_CORS_ORIGINS}"

  mailcatcher:
    image: schickling/mailcatcher
    ports:
      - "${MAILCATCHER_HTTP_PORT}:${MAILCATCHER_HTTP_PORT}"
      - "${MAILCATCHER_SMTP_PORT}:${MAILCATCHER_SMTP_PORT}"

  frontend:
    restart: "no"
    ports:
      - "${PORT_FRONTEND}:${FRONTEND_CONTAINER_PORT}"
    build:
      context: ./frontend
      args:
        - VITE_API_URL=${BACKEND_URL}
        - NODE_ENV=development

  playwright:
    build:
      context: ./frontend
      dockerfile: Dockerfile.playwright
      args:
        - VITE_API_URL=${BACKEND_INTERNAL_URL}
        - NODE_ENV=production
    ipc: host
    depends_on:
      - backend
      - mailcatcher
    env_file:
      - .env
    environment:
      - VITE_API_URL=${BACKEND_INTERNAL_URL}
      - MAILCATCHER_URL=${MAILCATCHER_INTERNAL_URL}
      # For the reports when run locally
      - PLAYWRIGHT_HTML_HOST=0.0.0.0
      - CI=${CI}
    volumes:
      - ./frontend/blob-report:/app/blob-report
      - ./frontend/test-results:/app/test-results
    ports:
      - 9323:9323

networks:
  traefik-public:
    # For local dev, don't expect an external Traefik network
    external: false
